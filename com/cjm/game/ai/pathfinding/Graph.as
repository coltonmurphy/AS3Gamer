package cjm.game.ai.pathfinding{	import cjm.game.ai.pathfinding.INode;	import cjm.game.ai.pathfinding.IGraph;		import flash.utils.Dictionary;		public class Graph implements IGraph	{				private var _nodes:Dictionary;				public function Graph()		{			_nodes = new Dictionary();		}								/**		*	Add a node to the graph.		*/		public function addNode(node:INode):void		{			if(_nodes[node] == null)			{				_nodes[node] = new NodeInfo(node);			}		}				/**		*	Create a relationship between two nodes, and add the cost for moving from		*	one node to the other.		*/		public function addNeighbour(fromNode:INode, toNode:INode, cost:Number):void		{			var ni:NodeInfo = _nodes[fromNode];			if(ni != null)			{				ni.neighbours[toNode] = cost;			}		}					/**		*	Get an Array of INode instances which are neighbours of node.		*/		public function getNeighbours(node:INode):Array		{			var ret:Array = new Array();			if(_nodes[node] != null)			{				var neighbours:Dictionary = _nodes[node].neighbours;				var neighbour:Object;				for(neighbour in neighbours)				{					ret.push(neighbour);				}			}			return ret;		}				public function getCost(fromNode:INode, toNode:INode):Number		{			var val:Number;						if(_nodes[fromNode] != null)			{				if(_nodes[fromNode].neighbours[toNode] != null)				{					val = _nodes[fromNode].neighbours[toNode];				}			}			return val;		}			}}import pathfinding.INode;import flash.utils.Dictionary;internal class NodeInfo{	public var node:INode;	public var neighbours:Dictionary;		public function NodeInfo(node:INode)	{		this.node = node;		neighbours = new Dictionary(true);	}	}	