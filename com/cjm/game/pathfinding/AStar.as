spackage com.cjm.game.ai.pathfinding{	import com.cjm.game.pathfinding.IGraph;	import com.cjm.game.pathfinding.IGraph;	import com.cjm.game.pathfinding.INode;	import com.cjm.game.pathfinding.IHeuristic;	import com.cjm.game.pathfinding.INode;	import com.cjm.game.pathfinding.Path;		public class AStar extends SearchAlgorithm	{				public var heuristic:IHeuristic;		public var endNode:INode;		public var startNode:INode;		private var _open:Array;		private var _closed:Array;		private var _graph:IGraph;		private var _path:IPath;				public function AStar( g:IGraph )		{			super( g )		}				public function process():IPath		{			var node:INode = startNode;			var neighbor:INode;			var neighbours:Vector.<INode>;			var cost:Number;			var g:Number;			var h:Number;			var f:Number;						while(node != endNode)			{				neighbours = _graph.getNeighbours(node);								while( neighbours.length )				{					neighbor = neighbours.pop() as INode;										if(neighbor == node || neighbor.walkable == false)					{						continue;					}										cost = _graph.getCost(node, neighbor);					g = node.g + cost;					h = heuristic.estimateCost(neighbor, endNode);					f = g + h;										if( _open.indexOf(neighbor) > -1 || _closed.indexOf(neighbor) > -1)					{						if(neighbor.f > f)						{							neighbor.f = f;							neighbor.g = g;							neighbor.h = h;							neighbor.parent = node;						}					}					else					{						neighbor.f = f;						neighbor.g = g;						neighbor.h = h;						neighbor.parent = node;						_open.push(neighbor);					}				}							_closed.push(node);								if(_open.length == 0)				{					trace("no path found");					return false				}								_open.sortOn("f", Array.NUMERIC);								node = _open.shift() as INode;			}			_path = new Path();			_path.addNode(endNode);			var node:INode = endNode;			while(node != startNode)			{				node = node.parent;				_path.addNode(node);			}						return _path;		}		public function get visited():Vector.<INode>		{			return _closed.concat(_open);		}	}}