package com.cjm.graph{	import com.cjm.collections.iterators.IIterator;		public interface IGraph	{		function getEdgeIterator( nodeIndex:int ):IIterator;	    function getNodeIterator():IIterator;	 		/*function addNeighbour(fromNode:INode, toNode:INode, cost:Number):void;		function getNeighbours(node:INode):Array;		function getCost(fromNode:INode, toNode:INode):Number;*/			    function getNode( idx:int):INode;	    function getEdge( from:int, to:int):GraphEdge;			    //retrieves the next free node index	    function getNextFreeNodeIndex():int  	    //adds a node to the graph and returns its index	    function addNode( node:INode ):int;	    //removes a node by setting its index to INVALID_NODE_INDEX	    function removeNode( index:int):int;	    //Use this to add an edge to the graph. The method will ensure that the	    //edge passed as a parameter is valid before adding it to the graph. If the	    //graph is a digraph then a similar edge connecting the nodes in the opposite	    //direction will be automatically added.	    function addEdge( edge:GraphEdge );	    //removes the edge connecting from and to from the graph (if present). If	    //a digraph then the edge connecting the nodes in the opposite direction 	    //will also be removed.	    function removeEdge( from:int, to:int):void;	    //sets the cost of an edge	    function setEdgeCost( from:int, to:int, cost:Number):void;	    //returns the number of active + inactive nodes present in the graph	    function getNumNodes():int	  	    //returns the number of active nodes present in the graph (this method's	    //performance can be improved greatly by caching the value)	    function  getNumActiveNodes():int	  	    //returns the total number of edges present in the graph	    function getNumEdges():int	  	    //returns true if the graph is directed	    function isDigraph():Boolean	    //returns true if the graph contains no nodes	    function isEmpty():Boolean	    //returns true if a node with the given index is present in the graph	    function isNodePresent( nd:int ):Boolean;	    //returns true if an edge connecting the nodes 'to' and 'from'	    //is present in the graph	    function isEdgePresent( from:int,  to:int):Boolean;	    //methods for loading and saving graphs from an open file stream or from	    //a file name 	    function save( name:String ):Boolean;		    function load(filename:String);	 	    //clears the graph ready for new node insertions	    function  clear():void	    function removeEdges():void		}}